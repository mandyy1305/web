


































































import React, { useState } from "react";
const TodoItem = (props) => {
const { eachTodo, onDeleteTodo, onUpdateTodo } = props;
const [editing, setEditing] = useState(false);
const [title, setUpdatedTitle] = useState(eachTodo.title);
const [description, setUpdatedDescription] = useState(eachTodo.description);
const [completed, setCompleted] = useState(eachTodo.completed);
const handleUpdate = () => {
onUpdateTodo(eachTodo.id, title, description, completed);
setEditing(false);
};
const handleDelete = () => { onDeleteTodo(eachTodo.id); };
const handleToggle = () => { setCompleted(!completed);
onUpdateTodo(eachTodo.id, title, description, completed);
};
const handleEdit = () => { setEditing(true); };
return (
<div className={`arrayofList ${completed ? "completed" : ""}`}>
{editing ? (
<>
<input type="text" value={title}
onChange={(e) => setUpdatedTitle(e.target.value)} />
<input type="text" value={description}
onChange={(e) => setUpdatedDescription(e.target.value)} />
<button onClick={handleUpdate}>Update</button>
</>
) : (
<>
<span className="todo-title">{title}</span>
<span className="todo-description">{description}</span>
<span>
<button onClick={handleToggle}> {completed ? "Incomplete" : "Complete"} </button>
<button onClick={handleEdit}>Edit</button>
<button onClick={handleDelete}>Delete</button>
</span>
</>
)}
</div>
);
};
export default TodoItem;
ToDoList.js
import React, { useState } from "react";
import TodoItem from "./TodoItem";
// Sample todos data
const todosListArray = [
{
id: 1,
title: "ReactJS",
description: "ReactJS description",
completed: false,
},
{
id: 2,
title: "Javascript",
description: "Javascript description",
completed: true,
},
];
const TodoList = () => {
// storing sample todos data into a state to perform CRUD operations
const [todosList, setTodosList] = useState(todosListArray);
const [title, setTitle] = useState("");
const [description, setDescripion] = useState("");
// Adding a new todo
const handleSubmit = (e) => {
e.preventDefault();
if (title !== "" && description !== "") {
const newTodo = {
id: todosList.length + 1,
title: title,
description: description,
};
setTodosList((prevTodosList) => [...prevTodosList, newTodo]);
setTitle("");
setDescripion("");
} else {
alert("Please enter all the fields to proceed...!");
}
};
// updating existing todo
const onUpdateTodo = (id, title, description, completed) => {
setTodosList((prevTodosList) =>
prevTodosList.map((eachTodo) =>
eachTodo.id === id
? {
...eachTodo,
title: title,
description: description,
completed: completed,
}
: eachTodo
)
);
};
// deleting todo
const onDeleteTodo = (id) => {
setTodosList((prevTodosList) =>
prevTodosList.filter((eachTodo) => eachTodo.id !== id)
);
};
return (
<div>
Todo Manager
{/* Adding Todo */}
<div>
<form onSubmit={handleSubmit}>
<input placeholder="title" name="title" value={title}
onChange={(e) => setTitle(e.target.value)} />
<input placeholder="description" value={description}
onChange={(e) => setDescripion(e.target.value)} />
<button onSubmit={handleSubmit}>Add</button>
</form>
</div>
{/* Displaying todos */}
{ todosList.map((eachTodo) => {
return (
<TodoItem
key={eachTodo.id}
eachTodo={eachTodo}
onUpdateTodo={onUpdateTodo}
onDeleteTodo={onDeleteTodo}
/>
);
})}
</div>
);
};
export default TodoList;
App.js
import "./App.css";
import TodoList from "./components/TodoList";
function App() {
return (
<div className="App">
<TodoList />
</div>
);
}
export default App;